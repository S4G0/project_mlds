# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11oiydOLTkVcLBs7CaJ5A8vCPW79Q40LT
"""

!pip install dvc dvc-gdrive
!apt install tree git

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import subprocess
from IPython import get_ipython
from IPython.display import display
import dvc
from sklearn.model_selection import train_test_split
import tensorflow as tf

# Ignorar warnings.
import warnings
warnings.filterwarnings('ignore')

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/S4G0/project_mlds.git
# %cd project_mlds/
!ls
!git config --global user.email "sagomezar@unal.edu.co"
!git config --global user.name "S4G0"

#ID del drive donde están los datos versionados
drive_id = "14xKJMlBPaIOgNHjV1RkJsqFBxjnPr69L" # reemplace aquí el id de su carpeta
os.environ["DRIVEID"] = drive_id

#Se importa el archivo credentials.json del repositorio
import json
with open("credentials.json") as f:
    os.environ["GDRIVE_CREDENTIALS_DATA"] = f.read()

# Se traen los datos
!dvc pull

#preprocesamiento del conjunto de imágenes#

list_name_train_benign=[]
list_name_train_malignant=[]
list_name_test_benign=[]
list_name_test_malignant=[]

for dirname, _, filenames in os.walk('./data/Imágenes/train/malignant'):
    for filename in filenames:
        list_name_train_malignant.append(os.path.join(dirname, filename))

for dirname, _, filenames in os.walk('./data/Imágenes/train/benign'):
    for filename in filenames:
        list_name_train_benign.append(os.path.join(dirname, filename))

for dirname, _, filenames in os.walk('/data/Imágenes/test/malignant'):
    for filename in filenames:
        list_name_test_malignant.append(os.path.join(dirname, filename))

for dirname, _, filenames in os.walk('/data/Imágenes/test/benign'):
    for filename in filenames:
        list_name_test_benign.append(os.path.join(dirname, filename))



from PIL import Image
image_list_train_benign= []
image_list_train_malignant= []
image_list_test_benign= []
image_list_test_malignant= []

#-----------------------------------------------------------------------------------
for dir_images in list_name_train_benign[:2000]:
  # Convert the image to a NumPy array
  image_list_train_benign.append(np.divide(np.array(Image.open(dir_images)),255))

#-----------------------------------------------------------------------------------
for dir_images in list_name_train_malignant[:2000]:
  # Convert the image to a NumPy array
  image_list_train_malignant.append(np.divide(np.array(Image.open(dir_images)),255))

#-----------------------------------------------------------------------------------
for dir_images in list_name_test_benign:
  # Convert the image to a NumPy array
  image_list_test_benign.append(np.divide(np.array(Image.open(dir_images)),255))

#-----------------------------------------------------------------------------------
for dir_images in list_name_test_malignant:
  # Convert the image to a NumPy array
  image_list_test_malignant.append(np.divide(np.array(Image.open(dir_images)),255))


image_list_train_benign= np.array(image_list_train_benign)
image_list_train_malignant= np.array(image_list_train_malignant)
image_list_test_benign= np.array(image_list_test_benign)
image_list_test_malignant= np.array(image_list_test_malignant)

print(image_list_train_benign.shape)
print(image_list_train_malignant.shape)
print(image_list_test_benign.shape)
print(image_list_test_malignant.shape)



#se concatena las imágenes de melanomas benignos y malignos en su conjunto de datos de entrenamiento y prueba correspondientes#

X_train = np.vstack((image_list_train_benign, image_list_train_malignant))
X_test = np.vstack((image_list_test_benign, image_list_test_malignant))

array_labels_train_benign = np.full((len(image_list_train_benign), 1), 0)
array_labels_train_malignant = np.full((len(image_list_train_malignant), 1), 1)
Y_train = np.vstack((array_labels_train_benign, array_labels_train_malignant))

array_labels_test_benign = np.full((len(image_list_test_benign), 1), 0)
array_labels_test_malignant = np.full((len(image_list_test_malignant), 1), 1)
Y_test = np.vstack((array_labels_test_benign, array_labels_test_malignant))

print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)



# Divide el conjunto de entrenamiento oringinal en conjuntos de entrenamiento y validación con el 80% de los datos usados para entrenamiento y el 20% para validación.

X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.2, random_state=5, stratify=Y_train)

# Veamos cuantas imagenes hay en cada partición
print(f'Datos de entrenamiento: {X_train.shape[0]}\nDatos de prueba: {X_test.shape[0]}\nDatos de validación: {X_val.shape[0]}\nTotal imágenes: {len(X_train)+len(X_test)+len(X_val)} ')



#Codificamos las etiquetas usando one-hot representation#

Y_train = tf.keras.utils.to_categorical(Y_train)
Y_val = tf.keras.utils.to_categorical(Y_val)
Y_test = tf.keras.utils.to_categorical(Y_test)